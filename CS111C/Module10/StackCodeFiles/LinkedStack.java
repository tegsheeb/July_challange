import java.util.EmptyStackException;/** * A class of stacks whose entries are stored in a chain of nodes. *  * @author Frank M. Carrano * @author Timothy M. Henry * @version 5.0 */public final class LinkedStack<T> implements StackInterface<T> {	private Node topNode; // References the first node in the chain	public LinkedStack() {		topNode = null;	} 	public void push(T newEntry) {		Node newNode = new Node(newEntry, topNode);		topNode = newNode;//    topNode = new Node(newEntry, topNode); // Alternate code	} 	public T peek() {		if (isEmpty())			throw new EmptyStackException();		else			return topNode.getData();	} 	public T pop() {		T top = peek(); // Might throw EmptyStackException				// Assertion: topNode != null		topNode = topNode.getNextNode();		return top;	} 	public boolean isEmpty() {		return topNode == null;	} 	public void clear() {		topNode = null; 	} 	private class Node {		private T data; 		private Node next; 		private Node(T dataPortion) {			this(dataPortion, null);		} 		private Node(T dataPortion, Node linkPortion) {			data = dataPortion;			next = linkPortion;		} 		private T getData() {			return data;		} 		private void setData(T newData) {			data = newData;		} 		private Node getNextNode() {			return next;		} 		private void setNextNode(Node nextNode) {			next = nextNode;		} 	} } 